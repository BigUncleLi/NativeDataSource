package org.uncle.lee.nativedatasource.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.uncle.lee.nativedatasource.Entity.in.App;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP".
*/
public class AppDao extends AbstractDao<App, Long> {

    public static final String TABLENAME = "APP";

    /**
     * Properties of entity App.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PackageName = new Property(1, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property AppLabel = new Property(2, String.class, "appLabel", false, "APP_LABEL");
        public final static Property AppPyLabel = new Property(3, String.class, "appPyLabel", false, "APP_PY_LABEL");
        public final static Property ClassName = new Property(4, String.class, "className", false, "CLASS_NAME");
        public final static Property NickName = new Property(5, String.class, "nickName", false, "NICK_NAME");
    };


    public AppDao(DaoConfig config) {
        super(config);
    }
    
    public AppDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PACKAGE_NAME\" TEXT NOT NULL ," + // 1: packageName
                "\"APP_LABEL\" TEXT," + // 2: appLabel
                "\"APP_PY_LABEL\" TEXT," + // 3: appPyLabel
                "\"CLASS_NAME\" TEXT," + // 4: className
                "\"NICK_NAME\" TEXT);"); // 5: nickName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, App entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPackageName());
 
        String appLabel = entity.getAppLabel();
        if (appLabel != null) {
            stmt.bindString(3, appLabel);
        }
 
        String appPyLabel = entity.getAppPyLabel();
        if (appPyLabel != null) {
            stmt.bindString(4, appPyLabel);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(5, className);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, App entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPackageName());
 
        String appLabel = entity.getAppLabel();
        if (appLabel != null) {
            stmt.bindString(3, appLabel);
        }
 
        String appPyLabel = entity.getAppPyLabel();
        if (appPyLabel != null) {
            stmt.bindString(4, appPyLabel);
        }
 
        String className = entity.getClassName();
        if (className != null) {
            stmt.bindString(5, className);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(6, nickName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public App readEntity(Cursor cursor, int offset) {
        App entity = new App( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // packageName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // appLabel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // appPyLabel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // className
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // nickName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, App entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPackageName(cursor.getString(offset + 1));
        entity.setAppLabel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAppPyLabel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setClassName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNickName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(App entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(App entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
